const {
    Telegraf,
    Markup
} = require('telegraf')
require('dotenv').config()
const txt = require('./const')
const txt1 = require('./rost')
const txt2 = require('./velo')

// functions
const bot = new Telegraf(process.env.bttk)

//—Å—Ç–∞—Ä—Ç (–∫–Ω–æ–ø–∫–∏ –î–∞1, –ù–µ—Ç2)
bot.start(async (ctx) => {
    
    try {
        await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.message.from.first_name}
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –ø—Ä–∏—Å—Ç—É–ø–∏–º?`, Markup.inlineKeyboard(
        [
            [Markup.button.callback('üö≤ –î–∞! üö≤', 'btn1'), Markup.button.callback('–ù–µ—Ç', 'btn2')]
        ]
    ))
    } catch(e){
        console.error(e)}
    })  

//–¢–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º (–∫–Ω–æ–ø–∫–∏ –î–∞–ª–µ–µ3, –ù–∞–∑–∞–¥4)
bot.action('btn1', async(ctx) =>{
try{
    await ctx.answerCbQuery()
    await ctx.reply('–¢–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º!', Markup.inlineKeyboard(
        [
            [Markup.button.callback('–î–∞–ª–µ–µ', 'btn3')]
        ]
    ))
} catch(e){
    console.error(e)}})
//7 - –º—É–∂ 8 - –∂–µ–Ω
bot.action('btn3', async(ctx) =>{
        try{
            await ctx.answerCbQuery()
            await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º: ', Markup.inlineKeyboard(
                [
                    [Markup.button.callback(`${txt1.sm}`, 'btn7'), Markup.button.callback(`${txt1.sw}`, 'btn8')],
                ]
            ))
        } catch(e){
            console.error(e)}})

//–º—É–∂ 9 - 155-172 10 - 168-182 11 - 178-190 12 - 185-200 13 - 200-210 14 - 190-210
bot.action('btn7', async(ctx) =>{
    try{
        await ctx.answerCbQuery()
        await ctx.reply('–¢–∞–∞–∫, –º—É–∂—á–∏–Ω–µ... —Ç–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ä–æ—Å—Ç–æ–º')
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—Å—Ç', Markup.inlineKeyboard(
            [
                [Markup.button.callback(`${txt1.r1}`, 'btn9'), Markup.button.callback(`${txt1.r2}`, 'btn10')],
                [Markup.button.callback(`${txt1.r3}`, 'btn11'), Markup.button.callback(`${txt1.r4}`, 'btn12')],
                [Markup.button.callback(`${txt1.r5}`, 'btn13'), Markup.button.callback(`${txt1.r6}`, 'btn14')],
                [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'btn3')]
            ]
        ))

    } catch(e){
        console.error(e)}})

bot.action('btn8', async(ctx) =>{
            try{
                await ctx.answerCbQuery()
                await ctx.reply('–•–º, –∂–µ–Ω—â–∏–Ω–µ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ä–æ—Å—Ç–æ–º!')
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—Å—Ç', Markup.inlineKeyboard(
                    [
                        [Markup.button.callback(`${txt1.r1}`, 'btn15'), Markup.button.callback(`${txt1.r2}`, 'btn16')],
                        [Markup.button.callback(`${txt1.r3}`, 'btn17'), Markup.button.callback(`${txt1.r4}`, 'btn18')],
                        [Markup.button.callback(`${txt1.r5}`, 'btn19'), Markup.button.callback(`${txt1.r6}`, 'btn20')],
                        [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'btn3')]
                    ]
                ))
        
            } catch(e){
                console.error(e)}})
//9 - 145-158


function RS_podbor(btn, rost, sex, velo_btn) {
    bot.action(btn, async(ctx) =>{
        try{
            await ctx.answerCbQuery()
            await ctx.reply('–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:')
            await ctx.replyWithHTML(`üö≤üö≤ –†–æ—Å—Ç: <b>${rost}</b>, –ü–æ–ª: <b>${sex}</b> üö≤üö≤`)
            await ctx.reply('–í—Å—ë –≤–µ—Ä–Ω–æ?',  Markup.inlineKeyboard(
                [
                    [Markup.button.callback('–î–∞, –ø–æ–∫–∞–∂–∏ –º–Ω–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã!', velo_btn), Markup.button.callback('–ù–µ—Ç, —Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å —Ä–æ—Å—Ç!', 'btn7')]
                ]
            ))
        } catch(e){
            console.error(e)}})
}


RS_podbor('btn9', txt1.r1, txt1.sm, 'v9')
RS_podbor('btn10', txt1.r2, txt1.sm, 'v10')
RS_podbor('btn11', txt1.r3, txt1.sm, 'v11')
RS_podbor('btn12', txt1.r4, txt1.sm, 'v12')
RS_podbor('btn13', txt1.r5, txt1.sm, 'v13')
RS_podbor('btn14', txt1.r6, txt1.sm, 'v14')
RS_podbor('btn15', txt1.r1, txt1.sw, 'v15')
RS_podbor('btn16', txt1.r2, txt1.sw, 'v16')
RS_podbor('btn17', txt1.r3, txt1.sw, 'v17')
RS_podbor('btn18', txt1.r4, txt1.sw, 'v18')
RS_podbor('btn19', txt1.r5, txt1.sw, 'v19')
RS_podbor('btn20', txt1.r6, txt1.sw, 'v20')

//–ù–µ—Ç (5 6) 
bot.action('btn2', async(ctx) =>{
        try{
            await ctx.answerCbQuery()
            await ctx.reply('–ù—É –º–æ–∂–µ—Ç –≤—Å—ë –∂–µ –ø–æ–∏—â–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥?...', Markup.inlineKeyboard(
                [
                    [Markup.button.callback('–ù—É –ª–∞–¥–Ω–æ, –¥–∞–≤–∞–π.', 'btn5'), Markup.button.callback('–ù–µ—Ç, –≤—Å—ë –µ—â—ë –Ω–µ —Ö–æ—á—É', 'btn6')]
                ]
            ))
        } catch(e){
            console.error(e)}})


bot.action('btn5', async(ctx) =>{
    try{
        await ctx.answerCbQuery()
        await ctx.reply('–¢–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º!', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–î–∞–ª–µ–µ', 'btn3')]
            ]
        ))
    } catch(e){
        console.error(e)}})

bot.action('btn6', async(ctx) =>{
    try{
        await ctx.answerCbQuery()
        await ctx.reply('–ù—É –Ω–µ —Ö–æ—á–µ—à—å, –∏ –ª–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏ —Ö–æ—Ç—å —Ç–∞–∫–æ–π üëâüö≤', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ï—Å–ª–∏ –≤—Å—ë –∂–µ –∑–∞—Ö–æ—á–µ—à—å, –Ω–∞–∂–º–∏ —Å—é–¥–∞', 'btn1')]
            ]
        ))
    } catch(e){
        console.error(e)
    }})

    function Velo_podbor(velo_btn, rost, sex, name, about, img){
bot.action(velo_btn, async(ctx) =>{
    try{
            await ctx.answerCbQuery()
            await ctx.reply(`–î–µ—Ä–∂–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç —Ç–µ–±–µ –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ${rost}, ${sex}:`)
            await ctx.replyWithHTML(`<b> ${name} </b>`)
            await ctx.replyWithHTML(`${about}`)
            if(img !==false){
                await ctx.replyWithPhoto({
                    url: (`${img}`)
                })
            }
        } catch(e){
            console.error(e)}})
        }
    
Velo_podbor('v9', txt1.r1, txt1.sm, txt2.mn11, txt2.ma11, txt2.mi13)
Velo_podbor('v10', txt1.r1, txt1.sm, txt2.mn21, txt2.ma22, txt2.mi23)
Velo_podbor('v11', txt1.r1, txt1.sm, txt2.mn31, txt2.ma32, txt2.mi33)
Velo_podbor('v12', txt1.r1, txt1.sm, txt2.mn41, txt2.ma42, txt2.mi34)
Velo_podbor('v13', txt1.r1, txt1.sm, txt2.mn51, txt2.ma52, txt2.mi35)
Velo_podbor('v14', txt1.r1, txt1.sm, txt2.mn61, txt2.ma62, txt2.mi36)
Velo_podbor('v15', txt1.r1, txt1.sw, txt2.wn11, txt2.wa12, txt2.wi31)
Velo_podbor('v16', txt1.r1, txt1.sw, txt2.wn21, txt2.wa22, txt2.wi32)
Velo_podbor('v17', txt1.r1, txt1.sw, txt2.wn31, txt2.wa32, txt2.wi33)
Velo_podbor('v18', txt1.r1, txt1.sw, txt2.wn41, txt2.wa42, txt2.wi34)
Velo_podbor('v19', txt1.r1, txt1.sw, txt2.wn51, txt2.wa52, txt2.wi35)
Velo_podbor('v20', txt1.r1, txt1.sw, txt2.wn61, txt2.wa62, txt2.wi36)

      
     
     

bot.help((ctx) => ctx.reply(`–°–µ–π—á–∞—Å —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${txt.cmd}`))
bot.hears('–ü—Ä–∏–≤–µ—Ç', (ctx) => ctx.reply(`–ù—É –ø—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name}, —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥? 
–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–∂–∏–º–∞–π -> /start`))
bot.launch()



// stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))